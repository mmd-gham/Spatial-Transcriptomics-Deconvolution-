import numpy as np
import pandas as pd
from Reference_Filtering import AttentionRegressionDeconvV1_3


# ======================
# Helper: ensure finite numeric matrices
# ======================
def ensure_finite(df):
    df = df.astype(float)
    df = df.replace([np.inf, -np.inf], 0)
    df = df.fillna(0)
    return df


# ======================
# End-to-end robustness test with gradual additive positive noise
# ======================
def test_robustness_pre_filter_noise(
    sc_data,
    st_data,
    st_coordinates,
    celltype,
    result_x,
    noise_levels=[0, 0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 0.9],
    seed=42
):
    """
    Test model robustness by gradually adding positive Gaussian noise
    to reference data before filtering.
    """
    np.random.seed(seed)
    results = []

    # Ensure float dtype and finite
    sc_data = ensure_finite(sc_data)
    st_data = ensure_finite(st_data)

    sc_data_original = sc_data.copy()

    for noise_level in noise_levels:
        # -------------------------
        # Add *positive* Gaussian noise proportional to gene std
        # -------------------------
        sc_noisy = sc_data_original.copy()
        noise_matrix = np.abs(np.random.normal(
            loc=0,
            scale=noise_level * sc_noisy.std(axis=0).values,
            size=sc_noisy.shape
        ))
        sc_noisy += noise_matrix
        sc_noisy = ensure_finite(sc_noisy)

        # -------------------------
        # Initialize and run model
        # -------------------------
        deconv = AttentionRegressionDeconvV1_3(
            sc_data=sc_noisy,
            st_data=st_data,
            st_coordinates=st_coordinates,
            celltype=celltype,
            phi=0.8,
            lambda_cell=1.0,
            lambda_spatial=1.0,
            lambda_ridge=1.0,
            max_cells_per_type=1000,
            n_iter=5,
            n_jobs=-1,
            k_neighbors=6,
            auto_filter_genes=True,
            var_threshold=0.1,
            auto_filter_cells=True,
            disp_threshold=3.0
        )

        # -------------------------
        # Run deconvolution
        # -------------------------
        deconv_celltypes, elapsed = deconv.run()

        # -------------------------
        # Evaluate with built-in metrics
        # -------------------------
        metrics = deconv.evaluate(deconv_celltypes, result_x)

        results.append({
            "noise_level": noise_level,
            "elapsed_sec": elapsed,
            **metrics
        })

        print(f"Elapsed time: {elapsed:.2f} sec")
        print("Metrics:", metrics)

    # Compile results
    results_df = pd.DataFrame(results)

    # -------------------------
    # Safe summary print
    # -------------------------
    metric_columns = [m for m in ["Pearson", "MSE", "MAE", "R2"] if m in results_df.columns]
    print("\n=== Robustness Summary ===")
    if len(metric_columns) > 0:
        print(results_df[["noise_level"] + metric_columns])
    else:
        print(results_df.head())

    return results_df


# ======================
# Example usage
# ======================
robustness_results = test_robustness_pre_filter_noise(
    sc_data=sc_data,
    st_data=st_data,
    st_coordinates=st_coordinates,
    celltype=celltype,
    result_x=result_x,
    noise_levels=[0, 0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 0.9]
)
